apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'

def safeExtGet(prop, fallback) {
    return rootProject.ext.has(prop) ? rootProject.ext.get(prop) : fallback
}

buildscript {
    ext.defaultKotlinVersion = '1.3.21'

    repositories {
        mavenCentral()
        google()
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:3.1.4'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:${rootProject.ext.has("kotlinVersion") ? rootProject.ext.get("kotlinVersion") : defaultKotlinVersion}"
    }
}

android {
    compileSdkVersion safeExtGet('compileSdkVersion', 26)
    buildToolsVersion safeExtGet('buildToolsVersion', '26.0.3')

    defaultConfig {
        minSdkVersion safeExtGet('minSdkVersion', 16)
        targetSdkVersion safeExtGet('targetSdkVersion', 26)
        versionCode 1
        versionName '1.0'
    }

    lintOptions {
        textReport true
        textOutput 'stdout'
        disable 'InvalidPackage', 'GradleCompatible'
    }

    testOptions {
        unitTests.all {
            systemProperty 'robolectric.dependency.repo.url', 'https://repo1.maven.org/maven2'
        }
    }

    buildTypes {
        release {
            minifyEnabled false
        }
        debug {
            testCoverageEnabled true
        }
    }
}

repositories {
    maven {
        url "$rootDir/../node_modules/react-native/android"
        name 'React Native (local)'
    }
    mavenCentral()
    google()
    jcenter()
}

dependencies {
    api 'com.facebook.react:react-native:+'
    api 'com.android.support:support-annotations:27.1.1'
    api "org.jetbrains.kotlin:kotlin-stdlib:${rootProject.ext.has("kotlinVersion") ? rootProject.ext.get("kotlinVersion") : defaultKotlinVersion}"
}

// Attaches a JAR to the archives artifact for a library
android.libraryVariants.all { variant ->
    // Only attach a jar for non-debug build types.
    if (!variant.buildType.isDebuggable()) {
        def name = variant.buildType.name
        def task = project.tasks.create "jar${name.capitalize()}", Jar
        task.dependsOn variant.javaCompile
        // Include Java classes
        task.from variant.javaCompile.destinationDir
        artifacts.add('archives', task);
    }
}